"--------------------------------------------"
"                 General                    "
"--------------------------------------------"
set nocompatible
filetype plugin on       		" Enable filetype plugin
filetype off
colorscheme desert

syntax on               		" Enable syntax hl
set autoread                	" Auto read when a file is changed from the outside
set noerrorbells                " No sound on errors
set novisualbell                " No sound on errors
set mouse=a                 	" Enable mouse
set backspace=eol,start,indent 	" Set backspace config
set history=70              	" The lines of history VIM has to remember
"language message en_US.UTF-8

" [Search configuration]
set ignorecase          		" Ignore case when searching
set smartcase           		" Case matches depend on what you type
set incsearch           		" Make search act like search in modern browsers
set magic               		" Use regular expressions for searching

" [Indent configuration]
let g:html_indent_script1 = "inc"   
let g:html_indent_style1 = "inc"  
let g:html_indent_inctags = "html,body,head,tbody"  
" set autoindent
" set cindent
" set smartindent

" [Tab configuration]
set noswapfile
" set shiftwidth=4        		" Number of space for indenting
" set tabstop=4           		" Width of TAB
set expandtab           		" Insert space for TAB
" set softtabstop=4
set smarttab
"set backupcopy=yes          	" Set the backup style as overwrite

" [spell checking]
set nospell						" No spell checking.
set spelllang=en  				" Language for spell checking.

" [Display configuration]
set splitright					" Put new splited window to the right of current.
set number              		" Display line number
set display=lastline,uhex
set ruler                		" Always show current position
set cmdheight=2          		" The commandbar height
set scrolloff=999               " min # of line above and below cursor
set showcmd              		" Show the command currently executing.
set showmode             		" Show which mode you are in
set showmatch            		" Show matching bracets when text indicator is over them
set nolazyredraw         		" Don't redraw while executing macros
set wrap						" Wrap the text
set hlsearch                    " highlight search
set t_Co=256

" [Statusline]
set laststatus=2 				" Always show the statusline
set statusline=
set statusline+=[%n]\                            "buffer number
set statusline+=%<%f\                            "File+path
set statusline+=%=%{strftime('%I:%M')}\ \        "Current time
set statusline+=%y\ \                            "FileType
set statusline+=%{''.(&fenc!=''?&fenc:&enc).''}  "Encoding
set statusline+=%{(&bomb?\",BOM\":\"\")}/        "Encoding2
set statusline+=%{&ff}\                          "FileFormat (dos/unix..)
set statusline+=\ row:%l/%L\ \                   "Rownumber/total (%)
set statusline+=col:%03c\                        "Colnr
set statusline+=\ %m%r%w\ %P\ \                  "Modified? Readonly? Top/bot.

"---------------------------------------------------------"
"               General Maping Keys                       "
" --------------------------------------------------------"
" [Copy and cut in visual mode; Paste in insert mode]
inoremap    <c-v>   <c-o>:set paste<cr><c-r>+<c-o>:set nopaste<cr>
xnoremap    <c-c>   "+y
xnoremap    <c-x>   "+x

" [Select all]
nnoremap    <c-a>   ggVG

" [Scroll up and down in Quickfix]
nnoremap    <c-n>   :cn<cr>
nnoremap    <c-p>   :cp<cr>

" [Basically you press * or # to search for the current selection !! Really useful]
vnoremap    <silent> *  y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>
vnoremap    <silent> #  y?<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>

" [CTRL-hjkl to browse command history and move the cursor]
cnoremap    <s-k>   <up>
cnoremap    <s-j>   <down>
cnoremap    <s-h>   <left>
cnoremap    <s-l>   <right>

" [CTRL-hjkl to move the cursor in insert mode]
inoremap    <m-k>   <c-k>
inoremap    <c-k>   <up>
inoremap    <c-j>   <down>
inoremap    <c-h>   <esc>I
inoremap    <c-l>   <esc>A
inoremap    <c-o>   <esc>o

" [Easy indent in visual mode]
xnoremap    <   <gv
xnoremap    >   >gv

" [Search and Complete]
"cnoremap    <m-n>   <cr>/<c-r>=histget('/',-1)<cr>
cnoremap    <m-i>   <c-r>=tolower(substitute(getline('.')[(col('.')-1):],'\W.*','','g'))<cr>

" [Quick write and quit]
imap        jj <esc>:w<cr>a
nnoremap    <leader>ww   :wqa!<cr>
nnoremap    <leader>qq   :qa!<cr>

" [Diff mode maps]
nnoremap    du      :diffupdate<cr>
xnoremap    <m-o>   :diffget<cr>
xnoremap    <m-p>   :diffput<cr>

" [Up down move]
nnoremap    j       gj
nnoremap    k       gk
nnoremap    gj      j
nnoremap    gk      k

" [Misc]
nnoremap    J       gJ
nnoremap    gJ      J
nnoremap    -       _
nnoremap    _       -

" [Smart way to move btw. windows]
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

" [Use the arrows to switch between buffers]
nmap <tab> :bn<cr>
nmap <S-tab> :bp<cr>

" no Highlight search"
nmap <leader><cr> :nohlsearch<cr>

" [switch to the directory of the open buffer]
map <leader>cd :cd %:p:h<cr>

" [complete close curly brace]
inoremap {<cr> {<cr>}<c-[>ko

" [Spell checking]"
map <leader>se :setlocal spell spelllang=en_us<cr>
map <leader>sn :setlocal nospell<cr>
"au BufNewFile *.txt put!='Last Modified: '

" [markdown]"
nmap <leader>md :%!markdown2 --html4tags % > "%:r".html<cr>:r<cr>kdd

nmap <F6> :!qmake -project; qmake; make<cr>

" fullscreen
noremap <silent> <F11> :exe "!wmctrl -r ".v:servername." -b toggle,fullscreen"<cr>

" exit to normal mode
imap kk <esc>
"-------------- end of general key mapings ------------"

"------------------------------------------------------"
"                       Plugin                         "
"------------------------------------------------------"
" let Vundle manage Vundle
" required! 
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/vundle'

Plugin 'mattn/emmet-vim'

Plugin 'SirVer/ultisnips'

Plugin 'honza/vim-snippets'

Plugin 'majutsushi/tagbar'

Plugin 'scrooloose/nerdtree'

Plugin 'Valloric/YouCompleteMe'

call vundle#end()

filetype plugin indent on     " required!
"
" Brief help
" :PluginList          - list configured bundles
" :PluginInstall(!)    - install (update) bundles
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Plugin commands are not allowed.

"---------------end of plugin-----------------------------'
"---------------Plugin Setting----------------------------'

let g:ycm_global_ycm_extra_conf="~/.ycm_extra_conf.py"

"Ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"nerd tree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

au BufRead,BufNewFile,BufReadPost *.jade set filetype=jade
"---------------end of plugin setting---------------------'

" Vim color file
"  Maintainer: Tiza
" Last Change: 2002/10/25 Fri 16:23.
"     version: 1.2
" This color scheme uses a dark background.
set background=dark
hi clear
if exists("syntax_on")
   syntax reset
   endif

   let colors_name = "neon"

   hi Normal       guifg=#f0f0f0 guibg=#303030

   " Search
   hi IncSearch    gui=UNDERLINE guifg=#80ffff guibg=#0060c0
   hi Search       gui=NONE guifg=#ffffa8 guibg=#808000
   " hi Search       gui=NONE guifg=#b0ffb0 guibg=#008000

   " Messages
   hi ErrorMsg     gui=BOLD guifg=#ffa0ff guibg=NONE
   hi WarningMsg   gui=BOLD guifg=#ffa0ff guibg=NONE
   hi ModeMsg      gui=BOLD guifg=#a0d0ff guibg=NONE
   hi MoreMsg      gui=BOLD guifg=#70ffc0 guibg=#8040ff
   hi Question     gui=BOLD guifg=#e8e800 guibg=NONE

   " Split area
   hi StatusLine   gui=NONE guifg=#000000 guibg=#c4c4c4
   hi StatusLineNC gui=NONE guifg=#707070 guibg=#c4c4c4
   hi VertSplit    gui=NONE guifg=#707070 guibg=#c4c4c4
   hi WildMenu     gui=NONE guifg=#000000 guibg=#ff80c0

   " Diff
   hi DiffText     gui=NONE guifg=#ff78f0 guibg=#a02860
   hi DiffChange   gui=NONE guifg=#e03870 guibg=#601830
   hi DiffDelete   gui=NONE guifg=#a0d0ff guibg=#0020a0
   hi DiffAdd      gui=NONE guifg=#a0d0ff guibg=#0020a0

   " Cursor
   hi Cursor       gui=NONE guifg=#70ffc0 guibg=#8040ff
   hi lCursor      gui=NONE guifg=#ffffff guibg=#8800ff
   hi CursorIM     gui=NONE guifg=#ffffff guibg=#8800ff

   " Fold
   hi Folded       gui=NONE guifg=#40f0f0 guibg=#006090
   hi FoldColumn   gui=NONE guifg=#40c0ff guibg=#404040

   " Other

function! EditCppFile(...)
    let file_prefix = expand('%:r')
    if filereadable(file_prefix . '.cpp')
        execute 'e ' . file_prefix . '.cpp'
    elseif filereadable(file_prefix . '.cc')
        execute 'e ' . file_prefix . '.cc'
    elseif filereadable(file_prefix . '.c')
        execute 'e ' . file_prefix . '.c'
    endif
endfunction

function! EditHeaderFile(...)
    let file_prefix = expand('%:r')
    if filereadable(file_prefix . '.h')
        execute 'e ' . file_prefix . '.h'
    elseif filereadable(file_prefix . '.hpp')
        execute 'e ' . file_prefix . '.hpp'
    endif
endfunction

command! Ecpp Call EditCppFile()
command! Ehead Call EditHeaderFile()

set cursorline
autocmd! BufWritePost *.cpp,*.cc,*.c,*.h,*.hpp execute '!clang-format -style=google -i %'
